Monte Carlo Simulations in Exotic Options Pricing and Risk Metrics
Use Case 1: Exotic Options Pricing
Exotic Options like barrier options, Asian options, and quanto options have payoff structures that are path-dependent or influenced by multiple factors. For these, Monte Carlo simulations are indispensable because:

They allow flexibility in handling complex payoffs.
Closed-form solutions often don’t exist for these options.
Example Scenario: Pricing a Multi-Asset Basket Option
Description: A basket option’s payoff depends on the performance of a weighted portfolio of underlying assets (e.g., a stock index or a basket of commodities).
Challenge: The payoff is path-dependent, and the correlation between assets must be accurately modeled.
Steps:
Model Asset Price Dynamics: Each asset in the basket follows a Geometric Brownian Motion (GBM):

𝑑
𝑆
𝑖
=
𝜇
𝑖
𝑆
𝑖
𝑑
𝑡
+
𝜎
𝑖
𝑆
𝑖
𝑑
𝑊
𝑖
dS 
i
​
 =μ 
i
​
 S 
i
​
 dt+σ 
i
​
 S 
i
​
 dW 
i
​
 
where 
𝑆
𝑖
S 
i
​
  is the price of asset 
𝑖
i, 
𝜇
𝑖
μ 
i
​
  is the drift, 
𝜎
𝑖
σ 
i
​
  is volatility, and 
𝑑
𝑊
𝑖
dW 
i
​
  is the Wiener process.

Simulate Correlated Price Paths:

Correlations: Use a covariance matrix for asset returns.
Cholesky Decomposition: Decompose the covariance matrix to generate correlated random variables:
𝑍
=
𝐿
⋅
𝜖
Z=L⋅ϵ
where 
𝐿
L is the Cholesky matrix, and 
𝜖
ϵ is a vector of independent standard normal variables.
Calculate Payoffs:

For a basket call option:
Payoff
=
max
⁡
(
∑
𝑤
𝑖
𝑆
𝑖
(
𝑇
)
−
𝐾
,
0
)
Payoff=max(∑w 
i
​
 S 
i
​
 (T)−K,0)
where 
𝑤
𝑖
w 
i
​
  are the asset weights, 
𝑆
𝑖
(
𝑇
)
S 
i
​
 (T) are the simulated terminal prices, and 
𝐾
K is the strike price.
Discount Expected Payoff: Compute the option price by averaging the discounted payoffs across all simulations:

Price
=
𝑒
−
𝑟
𝑇
⋅
1
𝑁
∑
𝑗
=
1
𝑁
Payoff
𝑗
Price=e 
−rT
 ⋅ 
N
1
​
  
j=1
∑
N
​
 Payoff 
j
​
 
Benefits:
Handles non-linearities and path dependencies.
Incorporates realistic correlations between assets.
Use Case 2: Risk Metrics (VaR and CVaR)
VaR (Value at Risk): Measures the potential loss in a portfolio over a specified time frame at a given confidence level.
CVaR (Conditional Value at Risk): Estimates the average loss beyond the VaR threshold.
Example Scenario: Portfolio VaR Estimation
Simulate Portfolio Returns:

Each asset’s return is modeled as:
𝑅
𝑖
=
𝜇
𝑖
Δ
𝑡
+
𝜎
𝑖
Δ
𝑡
𝑍
𝑖
R 
i
​
 =μ 
i
​
 Δt+σ 
i
​
  
Δt
​
 Z 
i
​
 
where 
𝑍
𝑖
Z 
i
​
  are correlated random variables generated using Cholesky decomposition.
Aggregate Portfolio Returns: Combine simulated returns to compute the portfolio’s return for each iteration:

𝑅
portfolio
=
∑
𝑤
𝑖
𝑅
𝑖
R 
portfolio
​
 =∑w 
i
​
 R 
i
​
 
where 
𝑤
𝑖
w 
i
​
  are asset weights.

Construct the Distribution:

Simulate thousands of portfolio returns to build a return distribution.
Sort the simulated returns in ascending order.
Compute Risk Metrics:

VaR: Identify the return at the desired percentile (e.g., 5% for a 95% confidence level).
CVaR: Calculate the average of returns below the VaR threshold.
Benefits:
Incorporates non-linear effects and fat tails in return distributions.
Adaptable to portfolios with derivatives or complex positions.
Integration with Cholesky Decomposition
Why Cholesky?

Ensures that simulated asset returns adhere to the real-world correlation structure.
Efficient for large covariance matrices.
Cholesky Workflow:
Calculate the covariance matrix, 
Σ
Σ, of asset returns.
Decompose 
Σ
Σ into 
𝐿
L such that:
Σ
=
𝐿
⋅
𝐿
𝑇
Σ=L⋅L 
T
 
Generate correlated random variables:
𝑅
correlated
=
𝐿
⋅
𝑍
R 
correlated
​
 =L⋅Z
where 
𝑍
Z is a vector of uncorrelated standard normals.


import numpy as np
import scipy.linalg

def simulate_basket_option_price(
    S0, weights, mu, sigma, corr_matrix, T, r, K, num_simulations, num_steps
):
    """
    Simulate the price of a multi-asset basket option using Monte Carlo.

    Parameters:
        S0 (np.array): Initial prices of the assets.
        weights (np.array): Weights of each asset in the basket.
        mu (np.array): Drift rates of the assets.
        sigma (np.array): Volatilities of the assets.
        corr_matrix (np.array): Correlation matrix of the assets.
        T (float): Time to maturity (in years).
        r (float): Risk-free rate.
        K (float): Strike price.
        num_simulations (int): Number of Monte Carlo simulations.
        num_steps (int): Number of time steps.

    Returns:
        float: Simulated price of the basket option.
    """
    num_assets = len(S0)
    dt = T / num_steps

    # Cholesky decomposition of the correlation matrix
    L = scipy.linalg.cholesky(corr_matrix, lower=True)

    # Simulate correlated asset paths
    prices = np.zeros((num_simulations, num_assets))
    for sim in range(num_simulations):
        S = S0.copy()
        for _ in range(num_steps):
            Z = np.random.normal(size=num_assets)  # Generate uncorrelated random variables
            correlated_Z = L @ Z  # Apply Cholesky to introduce correlation
            S = S * np.exp((mu - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * correlated_Z)
        prices[sim] = S

    # Calculate basket payoffs
    basket_values = np.sum(weights * prices, axis=1)
    payoffs = np.maximum(basket_values - K, 0)

    # Discount payoffs to present value
    option_price = np.exp(-r * T) * np.mean(payoffs)
    return option_price

# Example parameters
S0 = np.array([100, 95, 90])  # Initial prices of 3 assets
weights = np.array([0.4, 0.35, 0.25])  # Weights in the basket
mu = np.array([0.05, 0.03, 0.04])  # Drift rates
sigma = np.array([0.2, 0.25, 0.3])  # Volatilities
corr_matrix = np.array([
    [1.0, 0.8, 0.5],
    [0.8, 1.0, 0.6],
    [0.5, 0.6, 1.0],
])  # Correlation matrix
T = 1.0  # Time to maturity (1 year)
r = 0.05  # Risk-free rate
K = 95  # Strike price
num_simulations = 10000  # Number of simulations
num_steps = 252  # Number of time steps (daily)

# Compute option price
basket_option_price = simulate_basket_option_price(S0, weights, mu, sigma, corr_matrix, T, r, K, num_simulations, num_steps)
print(f"Simulated Basket Option Price: {basket_option_price:.2f}")


Here's a line-by-line explanation of the provided Python code for simulating the price of a multi-asset basket option using Monte Carlo simulations.

Function Definition
python
Copy code
def simulate_basket_option_price(S0, weights, mu, sigma, corr_matrix, T, r, K, num_simulations, num_steps):
    """
    Simulate the price of a multi-asset basket option using Monte Carlo.
    """
S0: Initial prices of the assets (array).
weights: Weight of each asset in the basket (array).
mu: Drift rates of the assets (array).
sigma: Volatilities of the assets (array).
corr_matrix: Correlation matrix representing dependencies between assets.
T: Time to maturity of the option in years (float).
r: Risk-free interest rate (float).
K: Strike price of the basket option (float).
num_simulations: Number of Monte Carlo simulations to perform (int).
num_steps: Number of time steps in each simulation (int).
The function will return the simulated price of the basket option.

Preliminary Setup
python
Copy code
    num_assets = len(S0)
    dt = T / num_steps
num_assets: Number of assets in the basket (length of S0).
dt: Time increment per step (\Delta t = T / \text{num_steps}).
Cholesky Decomposition
python
Copy code
    L = scipy.linalg.cholesky(corr_matrix, lower=True)
Cholesky Decomposition: Decomposes the correlation matrix into a lower triangular matrix 
𝐿
L, which is used to generate correlated random variables.
Simulate Correlated Asset Paths
python
Copy code
    prices = np.zeros((num_simulations, num_assets))
    for sim in range(num_simulations):
        S = S0.copy()
        for _ in range(num_steps):
            Z = np.random.normal(size=num_assets)  # Generate uncorrelated random variables
            correlated_Z = L @ Z  # Apply Cholesky to introduce correlation
            S = S * np.exp((mu - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * correlated_Z)
        prices[sim] = S
prices: An array to store the simulated terminal prices of all assets for all simulations.

Outer loop (sim): Iterates over the number of simulations.

S: Stores the asset prices for the current simulation. Initialized to S0 (initial prices).

Inner loop (steps): Simulates the price evolution of assets step-by-step:

Z: Generates independent standard normal random variables for each asset.
correlated_Z: Multiplies 
𝑍
Z by 
𝐿
L to introduce the correlation structure between assets.
Price Update Formula:
𝑆
=
𝑆
⋅
𝑒
(
𝜇
−
0.5
⋅
𝜎
2
)
⋅
𝑑
𝑡
+
𝜎
⋅
𝑑
𝑡
⋅
correlated_Z
S=S⋅e 
(μ−0.5⋅σ 
2
 )⋅dt+σ⋅ 
dt
​
 ⋅correlated_Z
 
This represents the Geometric Brownian Motion (GBM) model for each asset.
Store Terminal Prices: After all time steps, the final prices 
𝑆
S are stored in prices[sim].

Calculate Basket Payoffs
python
Copy code
    basket_values = np.sum(weights * prices, axis=1)
    payoffs = np.maximum(basket_values - K, 0)
basket_values: Computes the weighted sum of asset prices for each simulation, representing the value of the basket at maturity.
basket_value
=
∑
(
weights
𝑖
⋅
price
𝑖
)
basket_value=∑(weights 
i
​
 ⋅price 
i
​
 )
payoffs: Calculates the payoff of the basket option for each simulation:
payoff
=
max
⁡
(
basket_value
−
𝐾
,
0
)
payoff=max(basket_value−K,0)
This represents the intrinsic value of the option.
Discount Payoffs to Present Value
python
Copy code
    option_price = np.exp(-r * T) * np.mean(payoffs)
    return option_price
Discount Factor: 
𝑒
−
𝑟
⋅
𝑇
e 
−r⋅T
  discounts the future payoff to its present value.
Average Payoff: The mean of all discounted payoffs across simulations provides the Monte Carlo estimate of the option price.
Return the Result: The function returns the simulated option price.
Example Parameters
python
Copy code
S0 = np.array([100, 95, 90])  # Initial prices of 3 assets
weights = np.array([0.4, 0.35, 0.25])  # Weights in the basket
mu = np.array([0.05, 0.03, 0.04])  # Drift rates
sigma = np.array([0.2, 0.25, 0.3])  # Volatilities
corr_matrix = np.array([
    [1.0, 0.8, 0.5],
    [0.8, 1.0, 0.6],
    [0.5, 0.6, 1.0],
])  # Correlation matrix
T = 1.0  # Time to maturity (1 year)
r = 0.05  # Risk-free rate
K = 95  # Strike price
num_simulations = 10000  # Number of simulations
num_steps = 252  # Number of time steps (daily)
3 Assets with given initial prices, volatilities, and drift rates.
Correlation Matrix models dependencies between asset returns.
T = 1 year, simulated with 252 daily time steps.
10,000 simulations to ensure a robust estimate.
Run the Simulation
python
Copy code
basket_option_price = simulate_basket_option_price(
    S0, weights, mu, sigma, corr_matrix, T, r, K, num_simulations, num_steps
)
print(f"Simulated Basket Option Price: {basket_option_price:.2f}")
Calls the function with example parameters.
Prints the final simulated price of the basket option.
Output
For the given parameters, the output is the simulated basket option price. The value will vary slightly due to the randomness in Monte Carlo simulations.

Would you like to explore further enhancements, such as improving efficiency or parallelizing the simulation?












